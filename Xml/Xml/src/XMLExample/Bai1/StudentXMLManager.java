package XMLExample.Bai1;

import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.util.Scanner;

public class StudentXMLManager {
    private static final String FILE_NAME = "students.xml";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("\n=== QU·∫¢N L√ù SINH VI√äN ===");
            System.out.println("1. Th√™m sinh vi√™n");
            System.out.println("2. Hi·ªÉn th·ªã danh s√°ch sinh vi√™n");
            System.out.println("3. X√≥a sinh vi√™n theo ID");
            System.out.println("4. C·∫≠p nh·∫≠t sinh vi√™n theo ID");
            System.out.println("5. Tho√°t");
            System.out.print("Ch·ªçn ch·ª©c nƒÉng: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    addStudent(scanner);
                    break;
                case 2:
                    displayStudents();
                    break;
                case 3:
                    deleteStudent(scanner);
                    break;
                case 4:
                    updateStudent(scanner);
                    break;
                case 5:
                    System.out.println("Tho√°t ch∆∞∆°ng tr√¨nh.");
                    System.exit(0);
                default:
                    System.out.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!");
            }
        }
    }

    // Th√™m sinh vi√™n v√†o file XML
    public static void addStudent(Scanner scanner) {
        try {
            File file = new File(FILE_NAME);
            Document document;
            Element root;
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();

            if (file.exists()) {
                document = builder.parse(file);
                root = document.getDocumentElement();
            } else {
                document = builder.newDocument();
                root = document.createElement("students");
                document.appendChild(root);
            }

            System.out.print("Nh·∫≠p ID: ");
            String id = scanner.nextLine();
            System.out.print("Nh·∫≠p t√™n: ");
            String name = scanner.nextLine();
            System.out.print("Nh·∫≠p tu·ªïi: ");
            String age = scanner.nextLine();
            System.out.print("Nh·∫≠p chuy√™n ng√†nh: ");
            String major = scanner.nextLine();

            Element student = document.createElement("student");
            student.setAttribute("id", id);

            Element nameElement = document.createElement("name");
            nameElement.setTextContent(name);
            student.appendChild(nameElement);

            Element ageElement = document.createElement("age");
            ageElement.setTextContent(age);
            student.appendChild(ageElement);

            Element majorElement = document.createElement("major");
            majorElement.setTextContent(major);
            student.appendChild(majorElement);

            root.appendChild(student);
            saveXML(document);
            System.out.println("‚úÖ Th√™m sinh vi√™n th√†nh c√¥ng!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Hi·ªÉn th·ªã danh s√°ch sinh vi√™n t·ª´ file XML
    public static void displayStudents() {
        try {
            File file = new File(FILE_NAME);
            if (!file.exists()) {
                System.out.println("‚ö† Kh√¥ng c√≥ d·ªØ li·ªáu!");
                return;
            }

            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(file);
            document.getDocumentElement().normalize();

            NodeList studentList = document.getElementsByTagName("student");
            if (studentList.getLength() == 0) {
                System.out.println("‚ö† Kh√¥ng c√≥ sinh vi√™n trong danh s√°ch.");
                return;
            }

            System.out.println("\n=== DANH S√ÅCH SINH VI√äN ===");
            for (int i = 0; i < studentList.getLength(); i++) {
                Element student = (Element) studentList.item(i);
                System.out.println("üìå ID: " + student.getAttribute("id"));
                System.out.println("   - T√™n: " + student.getElementsByTagName("name").item(0).getTextContent());
                System.out.println("   - Tu·ªïi: " + student.getElementsByTagName("age").item(0).getTextContent());
                System.out.println("   - Chuy√™n ng√†nh: " + student.getElementsByTagName("major").item(0).getTextContent());
                System.out.println("----------------------------");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // X√≥a sinh vi√™n theo ID
    public static void deleteStudent(Scanner scanner) {
        try {
            System.out.print("Nh·∫≠p ID sinh vi√™n c·∫ßn x√≥a: ");
            String idToDelete = scanner.nextLine();

            File file = new File(FILE_NAME);
            if (!file.exists()) {
                System.out.println("‚ö† File kh√¥ng t·ªìn t·∫°i!");
                return;
            }

            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(file);

            NodeList students = document.getElementsByTagName("student");
            boolean found = false;

            for (int i = 0; i < students.getLength(); i++) {
                Element student = (Element) students.item(i);
                if (student.getAttribute("id").equals(idToDelete)) {
                    student.getParentNode().removeChild(student);
                    found = true;
                    break;
                }
            }

            if (found) {
                saveXML(document);
                System.out.println("‚úÖ Sinh vi√™n c√≥ ID " + idToDelete + " ƒë√£ b·ªã x√≥a.");
            } else {
                System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y sinh vi√™n c√≥ ID " + idToDelete);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // C·∫≠p nh·∫≠t sinh vi√™n theo ID
    public static void updateStudent(Scanner scanner) {
        try {
            System.out.print("Nh·∫≠p ID sinh vi√™n c·∫ßn c·∫≠p nh·∫≠t: ");
            String idToUpdate = scanner.nextLine();

            File file = new File(FILE_NAME);
            if (!file.exists()) {
                System.out.println("‚ö† File kh√¥ng t·ªìn t·∫°i!");
                return;
            }

            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(file);

            NodeList students = document.getElementsByTagName("student");
            boolean found = false;

            for (int i = 0; i < students.getLength(); i++) {
                Element student = (Element) students.item(i);
                if (student.getAttribute("id").equals(idToUpdate)) {
                    System.out.print("Nh·∫≠p t√™n m·ªõi: ");
                    student.getElementsByTagName("name").item(0).setTextContent(scanner.nextLine());

                    System.out.print("Nh·∫≠p tu·ªïi m·ªõi: ");
                    student.getElementsByTagName("age").item(0).setTextContent(scanner.nextLine());

                    System.out.print("Nh·∫≠p chuy√™n ng√†nh m·ªõi: ");
                    student.getElementsByTagName("major").item(0).setTextContent(scanner.nextLine());

                    found = true;
                    break;
                }
            }

            if (found) {
                saveXML(document);
                System.out.println("‚úÖ C·∫≠p nh·∫≠t sinh vi√™n th√†nh c√¥ng!");
            } else {
                System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y sinh vi√™n c√≥ ID " + idToUpdate);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // L∆∞u d·ªØ li·ªáu v√†o file XML
    private static void saveXML(Document document) throws TransformerException {
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.transform(new DOMSource(document), new StreamResult(new File(FILE_NAME)));
    }
}
